// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipChanged extends ethereum.Event {
  get params(): OwnershipChanged__Params {
    return new OwnershipChanged__Params(this);
  }
}

export class OwnershipChanged__Params {
  _event: OwnershipChanged;

  constructor(event: OwnershipChanged) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ManagementChanged extends ethereum.Event {
  get params(): ManagementChanged__Params {
    return new ManagementChanged__Params(this);
  }
}

export class ManagementChanged__Params {
  _event: ManagementChanged;

  constructor(event: ManagementChanged) {
    this._event = event;
  }

  get previousManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get _from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get _owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get _operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get _approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class BasicERC721__cardsInEditionResult {
  value0: string;
  value1: i32;
  value2: i32;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: string,
    value1: i32,
    value2: i32,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class BasicERC721__cardsResult {
  value0: string;
  value1: i32;
  value2: i32;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;

  constructor(
    value0: string,
    value1: i32,
    value2: i32,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set(
      "value1",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value1))
    );
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    return map;
  }
}

export class BasicERC721__abilitiesResult {
  value0: string;
  value1: boolean;
  value2: i32;
  value3: i32;
  value4: i32;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: string,
    value1: boolean,
    value2: i32,
    value3: i32,
    value4: i32,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class BasicERC721 extends ethereum.SmartContract {
  static bind(address: Address): BasicERC721 {
    return new BasicERC721("BasicERC721", address);
  }

  mintRandomCards(
    _owner: Address,
    _editionNumber: i32,
    _numCards: i32
  ): boolean {
    let result = super.call(
      "mintRandomCards",
      "mintRandomCards(address,uint8,uint8):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_editionNumber)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_numCards))
      ]
    );

    return result[0].toBoolean();
  }

  try_mintRandomCards(
    _owner: Address,
    _editionNumber: i32,
    _numCards: i32
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "mintRandomCards",
      "mintRandomCards(address,uint8,uint8):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_editionNumber)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_numCards))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  getApproved(_tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(_tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(_tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(_owner: Address, _index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    _owner: Address,
    _index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  destroyCard(_tokenId: BigInt): boolean {
    let result = super.call("destroyCard", "destroyCard(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_destroyCard(_tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("destroyCard", "destroyCard(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  cardsInEdition(
    param0: i32,
    param1: BigInt
  ): BasicERC721__cardsInEditionResult {
    let result = super.call(
      "cardsInEdition",
      "cardsInEdition(uint8,uint256):(string,uint8,uint8,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new BasicERC721__cardsInEditionResult(
      result[0].toString(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_cardsInEdition(
    param0: i32,
    param1: BigInt
  ): ethereum.CallResult<BasicERC721__cardsInEditionResult> {
    let result = super.tryCall(
      "cardsInEdition",
      "cardsInEdition(uint8,uint256):(string,uint8,uint8,uint256,uint256,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0)),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BasicERC721__cardsInEditionResult(
        value[0].toString(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  exists(_tokenId: BigInt): boolean {
    let result = super.call("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toBoolean();
  }

  try_exists(_tokenId: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("exists", "exists(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  tokenByIndex(_index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(_index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokensOf(_owner: Address): Array<BigInt> {
    let result = super.call("tokensOf", "tokensOf(address):(uint256[])", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigIntArray();
  }

  try_tokensOf(_owner: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("tokensOf", "tokensOf(address):(uint256[])", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  ownerOf(_tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(_tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  balanceOf(_owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(_owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(_owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintSpecificCards(
    _owner: Address,
    _editionNumber: i32,
    _cardIndexes: Array<BigInt>
  ): boolean {
    let result = super.call(
      "mintSpecificCards",
      "mintSpecificCards(address,uint8,uint256[]):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_editionNumber)),
        ethereum.Value.fromUnsignedBigIntArray(_cardIndexes)
      ]
    );

    return result[0].toBoolean();
  }

  try_mintSpecificCards(
    _owner: Address,
    _editionNumber: i32,
    _cardIndexes: Array<BigInt>
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "mintSpecificCards",
      "mintSpecificCards(address,uint8,uint256[]):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_editionNumber)),
        ethereum.Value.fromUnsignedBigIntArray(_cardIndexes)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  cards(param0: BigInt): BasicERC721__cardsResult {
    let result = super.call(
      "cards",
      "cards(uint256):(string,uint8,uint8,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new BasicERC721__cardsResult(
      result[0].toString(),
      result[1].toI32(),
      result[2].toI32(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt()
    );
  }

  try_cards(param0: BigInt): ethereum.CallResult<BasicERC721__cardsResult> {
    let result = super.tryCall(
      "cards",
      "cards(uint256):(string,uint8,uint8,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BasicERC721__cardsResult(
        value[0].toString(),
        value[1].toI32(),
        value[2].toI32(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt()
      )
    );
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  latestEditionReleased(): i32 {
    let result = super.call(
      "latestEditionReleased",
      "latestEditionReleased():(uint8)",
      []
    );

    return result[0].toI32();
  }

  try_latestEditionReleased(): ethereum.CallResult<i32> {
    let result = super.tryCall(
      "latestEditionReleased",
      "latestEditionReleased():(uint8)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  tokenURI(_tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(_tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(_tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  abilities(param0: BigInt): BasicERC721__abilitiesResult {
    let result = super.call(
      "abilities",
      "abilities(uint256):(string,bool,uint8,uint8,uint8,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new BasicERC721__abilitiesResult(
      result[0].toString(),
      result[1].toBoolean(),
      result[2].toI32(),
      result[3].toI32(),
      result[4].toI32(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_abilities(
    param0: BigInt
  ): ethereum.CallResult<BasicERC721__abilitiesResult> {
    let result = super.tryCall(
      "abilities",
      "abilities(uint256):(string,bool,uint8,uint8,uint8,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new BasicERC721__abilitiesResult(
        value[0].toString(),
        value[1].toBoolean(),
        value[2].toI32(),
        value[3].toI32(),
        value[4].toI32(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  improveCard(
    _tokenId: BigInt,
    _addedDamage: BigInt,
    _addedShield: BigInt
  ): boolean {
    let result = super.call(
      "improveCard",
      "improveCard(uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_addedDamage),
        ethereum.Value.fromUnsignedBigInt(_addedShield)
      ]
    );

    return result[0].toBoolean();
  }

  try_improveCard(
    _tokenId: BigInt,
    _addedDamage: BigInt,
    _addedShield: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "improveCard",
      "improveCard(uint256,uint256,uint256):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(_tokenId),
        ethereum.Value.fromUnsignedBigInt(_addedDamage),
        ethereum.Value.fromUnsignedBigInt(_addedShield)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isApprovedForAll(_owner: Address, _operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    _owner: Address,
    _operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromAddress(_operator)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintSpecificCard(
    _owner: Address,
    _editionNumber: i32,
    _cardIndex: BigInt
  ): boolean {
    let result = super.call(
      "mintSpecificCard",
      "mintSpecificCard(address,uint8,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_editionNumber)),
        ethereum.Value.fromUnsignedBigInt(_cardIndex)
      ]
    );

    return result[0].toBoolean();
  }

  try_mintSpecificCard(
    _owner: Address,
    _editionNumber: i32,
    _cardIndex: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "mintSpecificCard",
      "mintSpecificCard(address,uint8,uint256):(bool)",
      [
        ethereum.Value.fromAddress(_owner),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_editionNumber)),
        ethereum.Value.fromUnsignedBigInt(_cardIndex)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  className(param0: i32): string {
    let result = super.call("className", "className(uint8):(string)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);

    return result[0].toString();
  }

  try_className(param0: i32): ethereum.CallResult<string> {
    let result = super.tryCall("className", "className(uint8):(string)", [
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  isEditionAvailable(_editionNumber: i32): boolean {
    let result = super.call(
      "isEditionAvailable",
      "isEditionAvailable(uint8):(bool)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_editionNumber))]
    );

    return result[0].toBoolean();
  }

  try_isEditionAvailable(_editionNumber: i32): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isEditionAvailable",
      "isEditionAvailable(uint8):(bool)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(_editionNumber))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class MintRandomCardsCall extends ethereum.Call {
  get inputs(): MintRandomCardsCall__Inputs {
    return new MintRandomCardsCall__Inputs(this);
  }

  get outputs(): MintRandomCardsCall__Outputs {
    return new MintRandomCardsCall__Outputs(this);
  }
}

export class MintRandomCardsCall__Inputs {
  _call: MintRandomCardsCall;

  constructor(call: MintRandomCardsCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _editionNumber(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _numCards(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class MintRandomCardsCall__Outputs {
  _call: MintRandomCardsCall;

  constructor(call: MintRandomCardsCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class SetTokenURICall extends ethereum.Call {
  get inputs(): SetTokenURICall__Inputs {
    return new SetTokenURICall__Inputs(this);
  }

  get outputs(): SetTokenURICall__Outputs {
    return new SetTokenURICall__Outputs(this);
  }
}

export class SetTokenURICall__Inputs {
  _call: SetTokenURICall;

  constructor(call: SetTokenURICall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _uri(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetTokenURICall__Outputs {
  _call: SetTokenURICall;

  constructor(call: SetTokenURICall) {
    this._call = call;
  }
}

export class ReplaceManagerCall extends ethereum.Call {
  get inputs(): ReplaceManagerCall__Inputs {
    return new ReplaceManagerCall__Inputs(this);
  }

  get outputs(): ReplaceManagerCall__Outputs {
    return new ReplaceManagerCall__Outputs(this);
  }
}

export class ReplaceManagerCall__Inputs {
  _call: ReplaceManagerCall;

  constructor(call: ReplaceManagerCall) {
    this._call = call;
  }

  get newManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ReplaceManagerCall__Outputs {
  _call: ReplaceManagerCall;

  constructor(call: ReplaceManagerCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class SetClassNameCall extends ethereum.Call {
  get inputs(): SetClassNameCall__Inputs {
    return new SetClassNameCall__Inputs(this);
  }

  get outputs(): SetClassNameCall__Outputs {
    return new SetClassNameCall__Outputs(this);
  }
}

export class SetClassNameCall__Inputs {
  _call: SetClassNameCall;

  constructor(call: SetClassNameCall) {
    this._call = call;
  }

  get _classId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetClassNameCall__Outputs {
  _call: SetClassNameCall;

  constructor(call: SetClassNameCall) {
    this._call = call;
  }
}

export class DestroyCardCall extends ethereum.Call {
  get inputs(): DestroyCardCall__Inputs {
    return new DestroyCardCall__Inputs(this);
  }

  get outputs(): DestroyCardCall__Outputs {
    return new DestroyCardCall__Outputs(this);
  }
}

export class DestroyCardCall__Inputs {
  _call: DestroyCardCall;

  constructor(call: DestroyCardCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DestroyCardCall__Outputs {
  _call: DestroyCardCall;

  constructor(call: DestroyCardCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SetLatestEditionCall extends ethereum.Call {
  get inputs(): SetLatestEditionCall__Inputs {
    return new SetLatestEditionCall__Inputs(this);
  }

  get outputs(): SetLatestEditionCall__Outputs {
    return new SetLatestEditionCall__Outputs(this);
  }
}

export class SetLatestEditionCall__Inputs {
  _call: SetLatestEditionCall;

  constructor(call: SetLatestEditionCall) {
    this._call = call;
  }

  get _editionNumber(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class SetLatestEditionCall__Outputs {
  _call: SetLatestEditionCall;

  constructor(call: SetLatestEditionCall) {
    this._call = call;
  }
}

export class MintSpecificCardsCall extends ethereum.Call {
  get inputs(): MintSpecificCardsCall__Inputs {
    return new MintSpecificCardsCall__Inputs(this);
  }

  get outputs(): MintSpecificCardsCall__Outputs {
    return new MintSpecificCardsCall__Outputs(this);
  }
}

export class MintSpecificCardsCall__Inputs {
  _call: MintSpecificCardsCall;

  constructor(call: MintSpecificCardsCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _editionNumber(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _cardIndexes(): Array<BigInt> {
    return this._call.inputValues[2].value.toBigIntArray();
  }
}

export class MintSpecificCardsCall__Outputs {
  _call: MintSpecificCardsCall;

  constructor(call: MintSpecificCardsCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class AddCardToEditionCall extends ethereum.Call {
  get inputs(): AddCardToEditionCall__Inputs {
    return new AddCardToEditionCall__Inputs(this);
  }

  get outputs(): AddCardToEditionCall__Outputs {
    return new AddCardToEditionCall__Outputs(this);
  }
}

export class AddCardToEditionCall__Inputs {
  _call: AddCardToEditionCall;

  constructor(call: AddCardToEditionCall) {
    this._call = call;
  }

  get _editionNumber(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _classId(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _classVariant(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _damagePoints(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _shieldPoints(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _abilityId(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class AddCardToEditionCall__Outputs {
  _call: AddCardToEditionCall;

  constructor(call: AddCardToEditionCall) {
    this._call = call;
  }
}

export class ReplaceAbilityCall extends ethereum.Call {
  get inputs(): ReplaceAbilityCall__Inputs {
    return new ReplaceAbilityCall__Inputs(this);
  }

  get outputs(): ReplaceAbilityCall__Outputs {
    return new ReplaceAbilityCall__Outputs(this);
  }
}

export class ReplaceAbilityCall__Inputs {
  _call: ReplaceAbilityCall;

  constructor(call: ReplaceAbilityCall) {
    this._call = call;
  }

  get _abilityId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _canBeBlocked(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get _blackMagicCost(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _grayMagicCost(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get _whiteMagicCost(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get _addedDamage(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _addedShield(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }
}

export class ReplaceAbilityCall__Outputs {
  _call: ReplaceAbilityCall;

  constructor(call: ReplaceAbilityCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class ImproveCardCall extends ethereum.Call {
  get inputs(): ImproveCardCall__Inputs {
    return new ImproveCardCall__Inputs(this);
  }

  get outputs(): ImproveCardCall__Outputs {
    return new ImproveCardCall__Outputs(this);
  }
}

export class ImproveCardCall__Inputs {
  _call: ImproveCardCall;

  constructor(call: ImproveCardCall) {
    this._call = call;
  }

  get _tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _addedDamage(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _addedShield(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ImproveCardCall__Outputs {
  _call: ImproveCardCall;

  constructor(call: ImproveCardCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AddAbilityCall extends ethereum.Call {
  get inputs(): AddAbilityCall__Inputs {
    return new AddAbilityCall__Inputs(this);
  }

  get outputs(): AddAbilityCall__Outputs {
    return new AddAbilityCall__Outputs(this);
  }
}

export class AddAbilityCall__Inputs {
  _call: AddAbilityCall;

  constructor(call: AddAbilityCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _canBeBlocked(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get _blackMagicCost(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get _grayMagicCost(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get _whiteMagicCost(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get _addedDamage(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get _addedShield(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class AddAbilityCall__Outputs {
  _call: AddAbilityCall;

  constructor(call: AddAbilityCall) {
    this._call = call;
  }
}

export class MintSpecificCardCall extends ethereum.Call {
  get inputs(): MintSpecificCardCall__Inputs {
    return new MintSpecificCardCall__Inputs(this);
  }

  get outputs(): MintSpecificCardCall__Outputs {
    return new MintSpecificCardCall__Outputs(this);
  }
}

export class MintSpecificCardCall__Inputs {
  _call: MintSpecificCardCall;

  constructor(call: MintSpecificCardCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _editionNumber(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get _cardIndex(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintSpecificCardCall__Outputs {
  _call: MintSpecificCardCall;

  constructor(call: MintSpecificCardCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
